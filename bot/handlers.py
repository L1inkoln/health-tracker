import logging
from aiogram.types import (
    CallbackQuery,
    Message,
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils import (
    register_user,
    get_statistics,
    send_main_menu,
    update_goals,
    update_sleep,
    update_nutrition,
    update_health,
    plural_form,
    compare,
    reset_statistics,
    delete_user,
    get_goals,
)
from dispatcher import dp


logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class Form(StatesGroup):
    waiting_for_sleep = State()
    waiting_for_nutrition = State()
    waiting_for_health = State()


class GoalForm(StatesGroup):
    choosing_goal = State()
    updating_goal = State()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user is None:
        return
    user_id = message.from_user.id
    reg_status = await register_user(user_id)
    if reg_status is True:
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=send_main_menu(),
        )
    else:
        await message.answer(
            f"‚ö† {reg_status}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=send_main_menu(),
        )


@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    if message.from_user is None:
        return
    await message.answer(
        "üîô –í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=send_main_menu(),
    )


@dp.message(Command("reset"))
async def reset_stats_handler(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    response = await reset_statistics(telegram_id)
    if response is True:
        await message.answer(
            "üßπ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞.",
            reply_markup=send_main_menu(),
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=send_main_menu(),
        )


@dp.message(Command("delete"))
async def delete_user_handler(message: Message):
    if message.from_user is None:
        return
    telegram_id = message.from_user.id
    response = await delete_user(telegram_id)
    if response is True:
        await message.answer(
            "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=send_main_menu(),
        )
    else:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=send_main_menu(),
        )


@dp.callback_query(lambda c: c.data == "get_stats")
async def handle_stats(callback_query: CallbackQuery):
    await callback_query.answer()

    if callback_query.from_user is None:
        return

    telegram_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ü–µ–ª–∏
    stats = await get_statistics(telegram_id)
    goals = await get_goals(telegram_id)

    if isinstance(stats, dict) and isinstance(goals, dict):
        # –¶–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        norm_calories = goals["calories_goal"]
        norm_water = goals["water_goal"]
        norm_sleep = goals["sleep_goal"]
        norm_steps = goals["steps_goal"]

        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        calories = stats["calories"]
        water = stats["water"]
        sleep = stats["sleep"]
        steps = stats["steps"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏–π
        water_label = plural_form(water, ("–ª–∏—Ç—Ä", "–ª–∏—Ç—Ä–∞", "–ª–∏—Ç—Ä–æ–≤"))
        sleep_label = plural_form(sleep, ("—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤"))
        steps_label = plural_form(steps, ("—à–∞–≥", "—à–∞–≥–∞", "—à–∞–≥–æ–≤"))
        calories_label = plural_form(calories, ("–∫–∞–ª–æ—Ä–∏—è", "–∫–∞–ª–æ—Ä–∏–∏", "–∫–∞–ª–æ—Ä–∏–π"))

        water_note = compare(water, norm_water, "–í–æ–¥—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã")
        sleep_note = compare(sleep, norm_sleep, "–°–æ–Ω –≤ –Ω–æ—Ä–º–µ", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞")
        steps_note = compare(steps, norm_steps, "–•–æ—Ä–æ—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ú–∞–ª–æ —à–∞–≥–æ–≤")
        calories_note = compare(
            calories, norm_calories, "–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫–∞–ª–æ—Ä–∏–π"
        )

        stats_message = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
            f"üçΩ –ö–∞–ª–æ—Ä–∏–∏: {calories} {calories_label}\n{calories_note}\n\n"
            f"üíß –í–æ–¥–∞: {water} {water_label}\n{water_note}\n\n"
            f"üò¥ –°–æ–Ω: {sleep} {sleep_label}\n{sleep_note}\n\n"
            f"üö∂ –®–∞–≥–∏: {steps} {steps_label}\n{steps_note}"
        )

        await callback_query.message.answer(stats_message, parse_mode="HTML")
        await callback_query.message.answer(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu()
        )

    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        if not isinstance(stats, dict):
            await callback_query.message.answer(f"‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        if not isinstance(goals, dict):
            await callback_query.message.answer(f"‚ùå –¶–µ–ª–∏: {goals}")


@dp.callback_query(lambda c: c.data == "category_sleep")
async def process_sleep(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞:")
    await state.set_state(Form.waiting_for_sleep)


@dp.callback_query(lambda c: c.data == "category_nutrition")
async def process_nutrition(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏ –ª–∏—Ç—Ä—ã –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `2500 0.5`):"
    )
    await state.set_state(Form.waiting_for_nutrition)


@dp.callback_query(lambda c: c.data == "category_health")
async def process_health(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:")
    await state.set_state(Form.waiting_for_health)


@dp.callback_query(lambda c: c.data == "update_goals")
async def choose_goal_to_update(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?\n"
        "1Ô∏è‚É£ –ö–∞–ª–æ—Ä–∏–∏\n"
        "2Ô∏è‚É£ –í–æ–¥—É\n"
        "3Ô∏è‚É£ –°–æ–Ω\n"
        "4Ô∏è‚É£ –®–∞–≥–∏\n"
        "5Ô∏è‚É£ –í—Å–µ —Å—Ä–∞–∑—É\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 –∏–ª–∏ 5):"
    )
    await state.set_state(GoalForm.choosing_goal)


@dp.message(Form.waiting_for_sleep)
async def handle_sleep_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    user_id = message.from_user.id
    try:
        hours = int(message.text)
        if hours < 0 or hours > 24:
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞ –æ—Ç 0 –¥–æ 24."
            )
        else:
            result = await update_sleep(user_telegram_id=user_id, hours=hours)
            await message.answer(result)
    except ValueError:
        await message.answer(" ‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())


@dp.message(Form.waiting_for_nutrition)
async def handle_nutrition_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    try:
        calories_str, water_str = message.text.split()
        calories = int(calories_str)
        water = float(water_str)

        if not (0 <= calories <= 10000):
            await message.answer("‚ùå –ö–∞–ª–æ—Ä–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10000.")
        elif not (0 <= water <= 10):
            await message.answer("‚ùå –í–æ–¥—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 10 –ª–∏—Ç—Ä–æ–≤.")
        else:
            result = await update_nutrition(
                user_telegram_id=message.from_user.id, calories=calories, water=water
            )
            await message.answer(result)

    except Exception:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–ª–æ—Ä–∏–∏ –≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000 0.5)"
        )
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())


@dp.message(Form.waiting_for_health)
async def handle_health_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    try:
        steps = int(message.text)
        if steps < 0 or steps > 50000:
            await message.answer("‚ùå –®–∞–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 50000.")
        else:
            result = await update_health(
                user_telegram_id=message.from_user.id, steps=steps
            )
            await message.answer(result)
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())


@dp.message(GoalForm.choosing_goal)
async def handle_goal_choice(message: Message, state: FSMContext):
    choices = {
        "1": "calories_goal",
        "2": "water_goal",
        "3": "sleep_goal",
        "4": "steps_goal",
        "5": "all",
    }

    choice = message.text.strip()
    goal_type = choices.get(choice)

    if not goal_type:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –æ—Ç 1 –¥–æ 5.")
        return

    await state.update_data(goal_type=goal_type)

    if goal_type == "all":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–ª–æ—Ä–∏–∏ –≤–æ–¥–∞ —Å–æ–Ω —à–∞–≥–∏\n–ü—Ä–∏–º–µ—Ä: 2500 2.5 8 10000"
        )
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")

    await state.set_state(GoalForm.updating_goal)


@dp.message(GoalForm.updating_goal)
async def handle_goal_update(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    data = await state.get_data()
    goal_type = data["goal_type"]

    try:
        if goal_type == "all":
            # –ø–∞—Ä—Å–∏–º —Å—Ä–∞–∑—É 4 –∑–Ω–∞—á–µ–Ω–∏—è
            c, w, s, st = message.text.strip().split()
            payload = {
                "calories_goal": int(c),
                "water_goal": float(w),
                "sleep_goal": int(s),
                "steps_goal": int(st),
            }
        else:
            value = message.text.strip()
            if goal_type in ["calories_goal", "steps_goal", "sleep_goal"]:
                value = int(value)
            else:
                value = float(value)
            payload = {goal_type: value}

        result = await update_goals(telegram_id, payload)

        if result is True:
            await message.answer("üéØ –¶–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")

    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n")

    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())
