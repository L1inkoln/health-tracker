import logging
import requests
from aiogram.types import (
    CallbackQuery,
    Message,
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import API_URL
from utils import register_user, get_statistics, send_main_menu
from dispatcher import dp


logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class Form(StatesGroup):
    waiting_for_sleep = State()
    waiting_for_nutrition = State()
    waiting_for_health = State()


@dp.message(Command("start"))
async def cmd_start(message: Message):
    if message.from_user is None:
        return
    user_id = message.from_user.id
    reg_status = await register_user(user_id)
    if reg_status is True:
        await message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=send_main_menu(),
        )
    else:
        await message.answer(
            f"‚ö† {reg_status}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=send_main_menu(),
        )


@dp.callback_query(lambda c: c.data == "get_stats")
async def handle_stats(callback_query: CallbackQuery):
    if callback_query.from_user is None:
        return
    telegram_id = callback_query.from_user.id
    stats = await get_statistics(telegram_id)
    if isinstance(stats, dict):
        stats_message = (
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"üçΩ –ö–∞–ª–æ—Ä–∏–π: {stats['calories']}\n"
            f"üíß –í–æ–¥–∞: {stats['water']} –ª–∏—Ç—Ä–æ–≤\n"
            f"üò¥ –°–æ–Ω: {stats['sleep']} —á–∞—Å–æ–≤\n"
            f"üö∂ –®–∞–≥–æ–≤: {stats['steps']}"
        )
        await callback_query.message.answer(stats_message)
        await callback_query.message.answer(
            "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu()
        )
    else:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {stats}")


@dp.callback_query(lambda c: c.data == "category_sleep")
async def process_sleep(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞:")
    await state.set_state(Form.waiting_for_sleep)


@dp.callback_query(lambda c: c.data == "category_nutrition")
async def process_nutrition(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –∏ –≤–æ–¥—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: `2500 2`):"
    )
    await state.set_state(Form.waiting_for_nutrition)


@dp.callback_query(lambda c: c.data == "category_health")
async def process_health(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤:")
    await state.set_state(Form.waiting_for_health)


# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
@dp.message(Form.waiting_for_sleep)
async def handle_sleep_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    user_id = message.from_user.id
    try:
        hours = int(message.text)
        payload = {"user_telegram_id": user_id, "hours": hours}
        response = requests.post(f"{API_URL}/sleep/", json=payload)
        if response.status_code == 200:
            await message.answer(f"‚úÖ –ß–∞—Å—ã —Å–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {hours} —á–∞—Å–æ–≤.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())


@dp.message(Form.waiting_for_nutrition)
async def handle_nutrition_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    try:
        calories_str, water_str = message.text.split()
        calories = int(calories_str)
        water = float(water_str)
        payload = {
            "user_telegram_id": message.from_user.id,
            "calories": calories,
            "water": water,
        }
        response = requests.post(f"{API_URL}/nutrition/", json=payload)
        if response.status_code == 200:
            await message.answer(
                f"‚úÖ –ü–∏—Ç–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {calories} –∫–∞–ª–æ—Ä–∏–π, {water} –ª –≤–æ–¥—ã."
            )
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    except Exception:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–ª–æ—Ä–∏–∏ –≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2000 1.5)"
        )
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())


@dp.message(Form.waiting_for_health)
async def handle_health_input(message: Message, state: FSMContext):
    if message.from_user is None:
        return
    try:
        steps = int(message.text)
        payload = {"user_telegram_id": message.from_user.id, "steps": steps}
        response = requests.post(f"{API_URL}/health/", json=payload)
        if response.status_code == 200:
            await message.answer(f"‚úÖ –®–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {steps}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.clear()
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=send_main_menu())
