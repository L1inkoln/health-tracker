from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import httpx
from config import API_URL, BOT_SECRET

# Client –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
if API_URL is not None:
    client = httpx.AsyncClient(base_url=API_URL)

jwt_token = None


async def get_jwt_token():
    global jwt_token
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                f"{API_URL}/auth/bot", json={"password": BOT_SECRET}
            )
            response.raise_for_status()
            jwt_token = response.json()["access_token"]
            print("‚úÖ JWT —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")


def send_main_menu() -> InlineKeyboardMarkup:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü•ó –ü–∏—Ç–∞–Ω–∏–µ", callback_data="category_nutrition"
                )
            ],
            [InlineKeyboardButton(text="üò¥ –°–æ–Ω", callback_data="category_sleep")],
            [InlineKeyboardButton(text="üö∂ –ó–¥–æ—Ä–æ–≤—å–µ", callback_data="category_health")],
            [
                InlineKeyboardButton(
                    text="üéØ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–∏", callback_data="update_goals"
                )
            ],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="get_stats")],
        ]
    )


async def register_user(telegram_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FastAPI –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
    payload = {
        "telegram_id": telegram_id,
        "start_date": datetime.utcnow().isoformat(),
    }
    try:
        response = await client.post(
            f"{API_URL}/register/",
            json=payload,
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return True
        elif response.status_code == 400:
            return "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        else:
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def get_statistics(telegram_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
    try:
        response = await client.get(
            f"{API_URL}/statistics/{telegram_id}",
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return response.json()
        else:
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def get_goals(telegram_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
    try:
        response = await client.get(
            f"{API_URL}/goals/{telegram_id}",
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return response.json()
        else:
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def update_goals(telegram_id: int, payload: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–µ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = await client.patch(
            f"{API_URL}/goals/{telegram_id}",
            headers={"Authorization": f"Bearer {jwt_token}"},
            json=payload,
        )
        if response.status_code == 200:
            return True
        else:
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def reset_statistics(telegram_id: int):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        response = await client.patch(
            f"{API_URL}/reset/{telegram_id}",
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return True
        else:
            return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


def plural_form(n: int | float, forms: tuple[str, str, str]) -> str:
    n = abs(int(n))
    if n % 10 == 1 and n % 100 != 11:
        return forms[0]
    elif 2 <= n % 10 <= 4 and not (12 <= n % 100 <= 14):
        return forms[1]
    else:
        return forms[2]


# –ü–æ–¥—Å–∫–∞–∑–∫–∏
def compare(val, norm, good_msg, low_msg):
    if val >= norm:
        return f"‚úÖ {good_msg}"
    else:
        return f"‚ö†Ô∏è {low_msg} (–Ω–æ—Ä–º–∞: {norm})"


async def update_sleep(user_telegram_id: int, hours: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {"user_telegram_id": user_telegram_id, "hours": hours}
    try:
        response = await client.post(
            f"{API_URL}/sleep/",
            json=payload,
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return f"‚úÖ –ß–∞—Å—ã —Å–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {hours} —á–∞—Å–æ–≤."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def update_nutrition(user_telegram_id: int, calories: int, water: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {
        "user_telegram_id": user_telegram_id,
        "calories": calories,
        "water": water,
    }
    try:
        response = await client.post(
            f"{API_URL}/nutrition/",
            json=payload,
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return f"‚úÖ –ü–∏—Ç–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {calories} –∫–∞–ª–æ—Ä–∏–π, {water} –ª –≤–æ–¥—ã."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def update_health(user_telegram_id: int, steps: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    payload = {"user_telegram_id": user_telegram_id, "steps": steps}
    try:
        response = await client.post(
            f"{API_URL}/health/",
            json=payload,
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return f"‚úÖ –®–∞–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {steps}"
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"


async def delete_user(user_telegram_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã"""
    try:
        response = await client.request(
            method="DELETE",
            url=f"{API_URL}/delete/{user_telegram_id}",
            headers={"Authorization": f"Bearer {jwt_token}"},
        )
        if response.status_code == 200:
            return True
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {response.status_code}: {response.text}"
    except httpx.RequestError as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"
